#include<stdio.h>
#include<stdlib.h>
#define EmptyTOS -1
#define MinStackSize 5
#ifndef _STACK_H

struct StackRecord;
typedef struct StackRecord *Stack;//结构体的指针
typedef int ElementType;

int IsEmpty(Stack S);
int IsFull(Stack S);
Stack CreateStack(int MaxElements);
void DisPoseStack(Stack S);
void MakeEmpty(Stack S);
void Push(ElementType x, Stack S);
ElementType Top(Stack S);
void Pop(Stack S);
ElementType TopAndPop(Stack S);

#endif

struct StackRecord
{
	int Capacity;
	int TopOfStack;
	ElementType *Array;
};



#include"head.h"
#include<stdio.h>
#include<errno.h>


int IsEmpty(Stack S)
{
	return S->TopOfStack == -1;
}

int IsFull(Stack S)
{
	return S->Capacity == S->TopOfStack + 1;//不确定
}

Stack CreateStack(int MaxElements)
{
	Stack S;
	if (MaxElements < MinStackSize)
		printf("Stack size is too small");
	S = malloc(sizeof(struct StackRecord));
	if (S == NULL)
		printf("Out of space!!");
	S->Array = malloc(sizeof(ElementType)*MaxElements);
	if (S->Array == NULL)
		printf("Out of spacae!!");
	S->Capacity = MaxElements;
	MakeEmpty(S);
	return S;
}

void DisPoseStack(Stack S)
{
	if (S != NULL)
	{
		free(S->Array);
		free(S);
	}
}

void MakeEmpty(Stack S)
{
	S->TopOfStack = EmptyTOS;
}

void Push(ElementType x, Stack S)
{
	if (IsFull(S))
		printf("Full stack");
	else
		S->Array[++S->TopOfStack] = x;
}

ElementType Top(Stack S)
{
	if (!IsEmpty(S))
		return S->Array[S->TopOfStack];
	printf("Empty stack");
	return 0;
}

void Pop(Stack S)
{
	if (IsEmpty(S))
		printf("Empty stack");
	else
		S->TopOfStack--;

}

ElementType TopAndPop(Stack S)
{
	if (!IsEmpty(S))
		return S->Array[S->TopOfStack--];
	printf("Empty stack");
	return 0;
}
